/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../environments";
import * as core from "../../../core";
import { GigsApi } from "@fern-api/gigs";
import urlJoin from "url-join";
import * as serializers from "../../../serialization";

export declare namespace Client {
  interface Options {
    environment?: environments.Environment | string;
    token?: core.Supplier<core.BearerToken>;
  }
}

export class Client {
  constructor(private readonly options: Client.Options) {}

  public async archive(project: string, id: GigsApi.PlanId): Promise<GigsApi.plans.archive.Response> {
    const _response = await core.fetcher({
      url: urlJoin(
        this.options.environment ?? environments.Environment.Production,
        `/projects/${project}/plans/${id}/archive`
      ),
      method: "GET",
      headers: {
        Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
      },
    });
    if (_response.ok) {
      return {
        ok: true,
        body: await serializers.plans.archive.Response.parse(_response.body as serializers.plans.archive.Response.Raw),
      };
    }

    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 404:
          return {
            ok: false,
            error: GigsApi.plans.archive.Error.doesNotExist(
              await serializers.DoesNotExist.parse(_response.error.body as serializers.DoesNotExist.Raw)
            ),
          };
      }
    }

    return {
      ok: false,
      error: GigsApi.plans.archive.Error._unknown(_response.error),
    };
  }
}
