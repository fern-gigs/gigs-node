/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../environments";
import * as core from "../../../core";
import { GigsApi } from "@fern-api/gigs";
import urlJoin from "url-join";
import * as serializers from "../../../serialization";

export declare namespace Client {
  interface Options {
    environment?: environments.Environment | string;
    token?: core.Supplier<core.BearerToken>;
  }
}

export class Client {
  constructor(private readonly options: Client.Options) {}

  public async create(
    project: GigsApi.ProjectId,
    request: GigsApi.CreateUserRequest
  ): Promise<GigsApi.users.create.Response> {
    const _response = await core.fetcher({
      url: urlJoin(this.options.environment ?? environments.Environment.Production, `/projects/${project}//users`),
      method: "POST",
      headers: {
        Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
      },
      body: await serializers.users.create.Request.json({
        object: request.object,
        birthday: request.birthday,
        email: request.email,
        fullName: request.fullName,
        preferredLocale: request.preferredLocale,
      }),
    });
    if (_response.ok) {
      return {
        ok: true,
        body: await serializers.users.create.Response.parse(_response.body as serializers.users.create.Response.Raw),
      };
    }

    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 422:
          return {
            ok: false,
            error: GigsApi.users.create.Error.invalidIccid(
              await serializers.InvalidIccid.parse(_response.error.body as serializers.InvalidIccid.Raw)
            ),
          };
      }
    }

    return {
      ok: false,
      error: GigsApi.users.create.Error._unknown(_response.error),
    };
  }
}
