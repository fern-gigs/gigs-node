/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { GigsGigsCoreApi } from "@fern-api/gigs";
import * as core from "../../../core";

export type Response = core.APIResponse<GigsGigsCoreApi.User, GigsGigsCoreApi.users.create.Error>;
export type Error = GigsGigsCoreApi.users.create.Error.InvalidIccid | GigsGigsCoreApi.users.create.Error._Unknown;

export declare namespace Error {
  interface InvalidIccid extends _Utils {
    statusCode: 422;
    content: GigsGigsCoreApi.InvalidIccid;
  }

  interface _Unknown extends _Utils {
    statusCode: void;
    content: core.Fetcher.Error;
  }

  interface _Utils {
    _visit: <_Result>(visitor: GigsGigsCoreApi.users.create.Error._Visitor<_Result>) => _Result;
  }

  interface _Visitor<_Result> {
    invalidIccid: (value: GigsGigsCoreApi.InvalidIccid) => _Result;
    _other: (value: core.Fetcher.Error) => _Result;
  }
}

export const Error = {
  invalidIccid: (value: GigsGigsCoreApi.InvalidIccid): GigsGigsCoreApi.users.create.Error.InvalidIccid => {
    const valueWithoutVisit: Omit<GigsGigsCoreApi.users.create.Error.InvalidIccid, "_visit"> = {
      content: value,
      statusCode: 422,
    };
    return core.addNonEnumerableProperty(valueWithoutVisit, "_visit", function <
      _Result
    >(this: GigsGigsCoreApi.users.create.Error.InvalidIccid, visitor: GigsGigsCoreApi.users.create.Error._Visitor<_Result>) {
      return GigsGigsCoreApi.users.create.Error._visit(this, visitor);
    });
  },

  _unknown: (fetcherError: core.Fetcher.Error): GigsGigsCoreApi.users.create.Error._Unknown => {
    const valueWithoutVisit = fetcherError as unknown as Omit<GigsGigsCoreApi.users.create.Error._Unknown, "_visit">;
    return core.addNonEnumerableProperty(valueWithoutVisit, "_visit", function <
      _Result
    >(this: GigsGigsCoreApi.users.create.Error._Unknown, visitor: GigsGigsCoreApi.users.create.Error._Visitor<_Result>) {
      return GigsGigsCoreApi.users.create.Error._visit(this, visitor);
    });
  },

  _visit: <_Result>(
    value: GigsGigsCoreApi.users.create.Error,
    visitor: GigsGigsCoreApi.users.create.Error._Visitor<_Result>
  ): _Result => {
    switch (value.statusCode) {
      case 422:
        return visitor.invalidIccid(value.content);
      default:
        return visitor._other(value as any);
    }
  },
} as const;
